#=================================================================================================================================#
# CONFIGURATION                                                                                                                   #
# USAGE:
# COMPILER =MYCOMPILER_OPTION1_OPTION2...
# AVAILABLE COMPILERS: INTEL     (Intel Fortran Compiler)
#                      GNU       (GNU Compiler Collection)
#                      GNU_LLVM  (LLVM with GCC as a frontend, requires Dragonegg)
#                      CRAY      (CRAY compiler / CRAY PGI compiler)
# COMPILER OPTIONS:    DEBUG     (Compile with debug options (e.g. 00))
#                      MPI       (Compile with MPI support, enables you to use prebuilt libraries that require MPI on some systems)
#                      OMP       (Compile with OpenMP support, working for INTEL,GNU,IBMXL )
#                      GPROF     (Measuring of single/multicore performance, generally available currently only on Bluegene)
#
# MACHINE=MYMACHINE
# AVAILABLE OPTIONS:   AUTO      (Try to automatically get right machine from name)
#                      NEHALEM   (HLRS Nehalem cluster)
#                      CRAY      (HLRS Cray cluster)
#=================================================================================================================================#
COMPILER=GNU_MPI
MACHINE=AUTO  # AUTO, CRAY, NEHALEM or leave empty
CGNS_INT=32
BUILD_CGNS=T
BLAS_LAPACK=T
BUILD_HDF5=T

#=================================================================================================================================#
# GET MACHINE ENVIRONMENT 
#=================================================================================================================================#
ifeq ($(findstring AUTO,$(MACHINE)),AUTO)
  NODE = $(shell hostname)
  ifeq ($(findstring eslogin,$(NODE)),eslogin)
    MACHINE=CRAY
  endif
  ifeq ($(findstring juqueen,$(NODE)),juqueen)
    MACHINE=BLUEGENE
  endif
  ifeq ($(findstring hydra,$(NODE)),hydra)
    MACHINE=HYDRA
  endif
  ifeq ($(findstring AUTO,$(MACHINE)),AUTO)
    MACHINE=
  endif
endif

#=================================================================================================================================#
# PREPROCESSOR-DIRECTIVES                                                                                                         #
#=================================================================================================================================#
# Cut compiler for use with DEBUG-flags
empty:=
space:=$(empty) $(empty)
TMP=$(subst _, ,$(COMPILER))
SHARECOMP_MOD = $(word 1,$(TMP))
SHARECOMP=$(subst $(space),$(empty),$(SHARECOMP_MOD))

PREPROC +=-DPP_CGNS_INT=$(CGNS_INT)
#=================================================================================================================================#
# LIBRARIES                                                                                                                       #
#=================================================================================================================================#

#---------------------------------------------------------------------------------------------------------------------------------#
# HDF5
#---------------------------------------------------------------------------------------------------------------------------------#
# Download and compile HDF5 libraries, if not already available
HDF5_LIBS  = -lhdf5_fortran -lhdf5

ifeq ($(MACHINE),)
  ifneq ($(HDF5_DIR),)
    ifneq ($(wildcard $(HDF5_DIR)/lib/libhdf5.a), )
      HDF5_BASE = $(HDF5_DIR)
    endif
  endif
  ifneq ($(HDF5_ROOT),)
    ifneq ($(wildcard $(HDF5_ROOT)/lib/libhdf5.a), )
      HDF5_BASE = $(HDF5_ROOT)
    endif
  endif
  ifneq ($(BUILD_HDF5),)
    HDF5_VERSIONR = hdf5-1.10/hdf5-1.10.0-patch1
    HDF5_VERSION = 1.10.0-patch1
    HDF5_BASE = ../share/$(SHARECOMP)/hdf5-$(HDF5_VERSION)/hdf5
  endif
endif

#check for hdf5 compiled with CMake (check for characteristic FindHDF5.cmake)
ifneq ($(wildcard $(HDF5_BASE)/share/cmake/hdf5/FindHDF5.cmake), )
  HDF5_LIBS  = -lhdf5_fortran -lhdf5_f90cstub -lhdf5
endif
ifneq ($(wildcard $(HDF5_BASE)/share/cmake/FindHDF5.cmake), )
  HDF5_LIBS  = -lhdf5_fortran -lhdf5_f90cstub -lhdf5
endif

# HDF5 requires DL lib and Zlib
HDF5_LIBS += -ldl -lz

# HLRS, CRAY - Use available HDF5 libraries. Don't forget to load HDF5 module!
ifeq ($(findstring CRAY,$(MACHINE)),CRAY)
  HDF5_BASE = $(HDF5_DIR)
endif

# BLUEGENE - Use available HDF5 libraries. Don't forget to load HDF5 module!
ifeq ($(findstring BLUEGENE,$(MACHINE)),BLUEGENE)
  HDF5_BASE = /bgsys/local/hdf5
  SZ_INC    = -I/bgsys/local/szip/include -I/bgsys/local/zlib/include
  SZ_LIB    = -L/bgsys/local/szip/lib -L/bgsys/local/zlib/lib
  SZ_LIBS   = -lsz
endif
ifeq ($(findstring HYDRA,$(MACHINE)),HYDRA)
  HDF5_BASE = $(HDF5_HOME)
  HDF5_LIBS += -Xlinker -rpath=$(HDF5_BASE)/lib
endif

HDF5_LIB  = -L$(HDF5_BASE)/lib/
HDF5_INC  = -I$(HDF5_BASE)/include/

#---------------------------------------------------------------------------------------------------------------------------------#
# Tecplot Binary
#---------------------------------------------------------------------------------------------------------------------------------#
TECLIB_VERSION = 12.0
TECBIN_LIB = -L../share/$(SHARECOMP)/tecio-$(TECLIB_VERSION)
TECBIN_LIBS = -ltecio -lstdc++

#---------------------------------------------------------------------------------------------------------------------------------#
# CGNS
#---------------------------------------------------------------------------------------------------------------------------------#
ifneq ($(CGNS_DIR),)
  ifneq ($(wildcard $(CGNS_DIR)/lib/libcgns.a), )
    CGNS_LIBDIR =$(CGNS_DIR)/lib
    CGNS_INCDIR =$(CGNS_DIR)/include
  endif
endif
ifneq ($(BUILD_CGNS),)
  CGNS_VERSION=3.2.1
  CGNS_DIR    =../share/$(SHARECOMP)/CGNS-$(CGNS_VERSION)/src
  CGNS_LIBDIR =../share/$(SHARECOMP)/CGNS-$(CGNS_VERSION)/build/lib
  CGNS_INCDIR =../share/$(SHARECOMP)/CGNS-$(CGNS_VERSION)/build/include
endif
CGNS_LIB    =-L$(CGNS_LIBDIR)
CGNS_INC    =-I$(CGNS_INCDIR)
CGNS_LIBS   =-lcgns

#---------------------------------------------------------------------------------------------------------------------------------#
# BLAS / LAPACK 
#---------------------------------------------------------------------------------------------------------------------------------#
# all these setup options assume a pre-installed library
ifneq ($(BLAS_LAPACK),)
  ifeq ($(findstring MKL,$(BLAS_LAPACK)),MKL)
    BLAS_LAPACK_INC  = -mkl=sequential
    BLAS_LAPACK_LIB  =
    BLAS_LAPACK_LIBS = -mkl=sequential
    ifeq ($(findstring HYDRA,$(MACHINE)),HYDRA)
      BLAS_LAPACK_LIBS += -Xlinker -rpath=$(MKL_HOME)/lib/intel64
    endif
  else
    BLAS_LAPACK_INC  =
    BLAS_LAPACK_LIB  = -L$(BLAS_LAPACK)
    BLAS_LAPACK_LIBS = -llapack -lblas
  endif
endif

#=================================================================================================================================#
# COMPILER                                                                                                                        #
#=================================================================================================================================#

ENVIRONMENT=$(COMPILER) # specified at top of file
AR         =ar
AR_FLAGS   =clr

#---------------------------------------------------------------------------------------------------------------------------------#
# INTEL
#---------------------------------------------------------------------------------------------------------------------------------#
ifeq ($(findstring INTEL,$(ENVIRONMENT)),INTEL)
  FC=ifort
  CC=cc
  ifeq ($(findstring MPI,$(ENVIRONMENT)),MPI)
    FC=mpif90
    CC=mpicc
    ifeq ($(findstring HYDRA,$(MACHINE)),HYDRA)
      FC=mpiifort
      CC=mpiicc
    endif
  endif
  ifeq ($(findstring CRAY,$(MACHINE)),CRAY)
    FC=ftn
    CC=cc
  endif
  AR =xiar # required for compilation using -ipo and -fast
  PREPROC +=-DINTEL

  FCFLAGS  =-fpp -assume bscc -r8 -i4 -traceback -warn all # don't change
  FLFLAGS  =-r8 -i4 -traceback -assume bscc #-static # don't change
  F03STD   =-std03

  ifeq ($(findstring DEBUG,$(ENVIRONMENT)),DEBUG)
    FCFLAGS  +=-g -O0 -fpe0 -traceback \
               -check all,noarg_temp_created,noformat,nooutput_conversion,pointer,bounds,uninit
    FLFLAGS  +=-g -O0 
  else
    # -fast: -03(=general optlevel) -xhost(adapt to current system) -ipo(=interprocedural optimizations) 
    #        -static(=static linking) -no-prec-div(= A/B -> A*(1/B))
    FCFLAGS  +=-O2 -xhost -vec-report0 # -align array64byte #-ipo -prof-use -prof-dir/home/iagbole/Codeentwicklung/flexi/prof #-ipo -unroll-aggressive -p -pg  #IPO only on intel >12.0
    FLFLAGS  +=-O2 -xhost -vec-report0 # -align array64byte #-ipo -prof-use -prof-dir/home/iagbole/Codeentwicklung/flexi/prof #-ipo -unroll-aggressive -p -pg
  endif 

  ifeq ($(findstring OMP,$(ENVIRONMENT)),OMP)
    PREPROC += -DOMP
    FCFLAGS += -openmp
    OMP_LIB =  -openmp
  endif
endif

#---------------------------------------------------------------------------------------------------------------------------------#
# GNU
#---------------------------------------------------------------------------------------------------------------------------------#
ifeq ($(findstring GNU,$(ENVIRONMENT)),GNU)
  FC=gfortran
  CC=cc
  ifeq ($(findstring MPI,$(ENVIRONMENT)),MPI)
    FC=mpif90
    CC=mpicc
  endif
  ifeq ($(findstring CRAY,$(MACHINE)),CRAY)
    FC=ftn
  endif
  PREPROC +=-DGNU

  FCFLAGS    = -xf95-cpp-input -fdefault-real-8 -fdefault-double-8 -fbackslash -DGNU # don't change
  FLFLAGS    = -fdefault-real-8 -fbackslash # don't change

  ifeq ($(findstring DEBUG,$(ENVIRONMENT)),DEBUG)
    FCFLAGS  += -g -O0 -ggdb3 -fbounds-check -finit-real=nan -fbacktrace -Wall -Wextra
    FLFLAGS  += -g -O0 -ggdb3 -fbounds-check -finit-real=nan -fbacktrace -Wall -Wextra
  else
	  # -03(=general optlevel) -march=native(adapt to current system) -flto(=interprocedural optimizations) 
    FCFLAGS  += -O2 -march=native
    FLFLAGS  += -O2 -march=native
  endif

  ifeq ($(findstring OMP,$(ENVIRONMENT)),OMP)
    PREPROC += -DOMP
    FCFLAGS += -fopenmp
    FLFLAGS += -fopenmp
  endif

  ifeq ($(findstring LLVM,$(ENVIRONMENT)),LLVM)
    FCFLAGS += -fplugin=dragonegg
    FLFLAGS += -fplugin=dragonegg
  endif
endif

#---------------------------------------------------------------------------------------------------------------------------------#
# CRAY
#---------------------------------------------------------------------------------------------------------------------------------#
ifeq ($(findstring CRAY,$(ENVIRONMENT)),CRAY)
  ifeq ($(findstring PGI,$(ENVIRONMENT)),PGI)
    FC=pgf90
    PREPROC +=-DPGI
  else # Cray CCE
    FC=ftn # ??
    PREPROC +=-DCRAY
  endif
  CC=cc

  ifeq ($(findstring PGI,$(ENVIRONMENT)),PGI)
    FCFLAGS    =-r8 -i4 -byteswapio -Mextend -Mpreprocess -DPGI # don't change
    FLFLAGS    =-r8 -i4 -byteswapio -Mextend # don't change
    F03STD     =-std=f2003
  else # Cray CCE
   FCFLAGS    =-eZ -F -f free -s real64 -hbyteswapio -em -J .# don't change
   FLFLAGS    =-f free -s real64 -hbyteswapio -em -J .# don't change
   F03STD     =
  endif

  ifeq ($(findstring DEBUG,$(ENVIRONMENT)),DEBUG)
    ifeq ($(findstring PGI,$(ENVIRONMENT)),PGI)
      FCFLAGS  +=-O0 -g -Minform=inform
      FLFLAGS  +=-O0 -g -Minform=inform
    else # Cray CCE
      FCFLAGS  +=-O0 -eD
      FLFLAGS  +=-O0 -eD
    endif
  else
    ifeq ($(findstring PGI,$(ENVIRONMENT)),PGI)
      FCFLAGS  +=-fast #-Mipa=fast,inline #-O2 #-fastsse #-Munroll=n:4 -Mipa=fast,inline
      FLFLAGS  +=-fast #-Mipa=fast,inline #-O2 #-fastsse #-Munroll=n:4 -Mipa=fast,inline
    else # Cray CCE
      FCFLAGS  +=-O2 -p . -rm#-O ipa5 # -O3
      FLFLAGS  +=-O2 -p . -rm#-O ipa5 # -O3
    endif
  endif
endif

#---------------------------------------------------------------------------------------------------------------------------------#
# Define libs
#---------------------------------------------------------------------------------------------------------------------------------#
EXTERNAL_LIBS = $(HDF5_LIBS) $(SZ_LIBS) $(CGNS_LIBS) $(BLAS_LAPACK_LIBS)
LIBDIRS       = $(HDF5_LIB)  $(SZ_LIB)  $(CGNS_LIB)  $(BLAS_LAPACK_LIB) $(OMP_LIB)
INCDIRS       = $(HDF5_INC)  $(SZ_INC)  $(CGNS_INC)  $(BLAS_LAPACK_INC) 
 
PREPROC_LIB   = libpreproc.a

FCFLAGS += $(PREPROC) -I.
FLFLAGS += $(PREPROC)
